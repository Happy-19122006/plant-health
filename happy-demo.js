#!/usr/bin/env node

/**
 * Happy AI Agent Demo
 * This script demonstrates Happy's natural conversation and emotional responses
 */

console.log('ЁЯШК Happy AI Agent Demo\n');

// Simulate Happy AI Agent
class HappyDemo {
    constructor() {
        this.name = 'Happy';
        this.isActivated = false;
        this.conversationCount = 0;
    }

    async startDemo() {
        console.log('='.repeat(60));
        console.log('ЁЯШК Happy AI Agent Demo Starting...');
        console.log('='.repeat(60));
        
        // Step 1: Initial greeting
        await this.initialGreeting();
        
        // Step 2: Activation process
        await this.activationProcess();
        
        // Step 3: Natural conversation
        await this.naturalConversation();
        
        // Step 4: Emotional responses
        await this.emotionalResponses();
        
        // Step 5: Problem solving
        await this.problemSolving();
        
        // Step 6: Farewell
        await this.farewell();
    }

    async initialGreeting() {
        console.log('\nЁЯСд User: [Opens website]');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('ЁЯСЛ рдирдорд╕реНрддреЗ! рдореИрдВ Happy рд╣реВрдВред рдореБрдЭреЗ activate рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП \'Happy\' рдмреЛрд▓рд┐рдП, рдлрд┐рд░ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред');
        console.log('рдореИрдВ рдЖрдкрд╕реЗ рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рдмрд╛рдд рдХрд░реВрдВрдЧрд╛ред');
        
        await this.delay(2000);
    }

    async activationProcess() {
        console.log('\nЁЯСд User: "Happy"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('ЁЯОЙ **рд╣рдо рдмреЛрд▓рд┐рдП!** рдореИрдВ Happy рд╣реВрдВ, рдЖрдкрдХрд╛ AI рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ!');
        console.log('рдореИрдВ рдЖрдкрдХреА рдлрд╕рд▓реЛрдВ рдХреА рджреЗрдЦрднрд╛рд▓ рдореЗрдВ рдорджрдж рдХрд░реВрдВрдЧрд╛ред');
        console.log('рдмрддрд╛рдЗрдП, рдЖрдЬ рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ? рдореИрдВ рдЖрдкрд╕реЗ рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рдмрд╛рдд рдХрд░реВрдВрдЧрд╛ред');
        
        this.isActivated = true;
        
        await this.delay(3000);
        
        console.log('\nЁЯШК Happy:');
        console.log('ЁЯМЯ **Happy рдХреА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ:**');
        console.log('');
        console.log('ЁЯТм **рджреЛрд╕реНрддрд╛рдирд╛ рдмрд╛рддрдЪреАрдд**: рдореИрдВ рдЖрдкрд╕реЗ рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рдмрд╛рдд рдХрд░рддрд╛ рд╣реВрдВ');
        console.log('ЁЯМ▒ **рдлрд╕рд▓ рдХреА рджреЗрдЦрднрд╛рд▓**: рдЖрдкрдХреА рдлрд╕рд▓реЛрдВ рдХреА рд╣рд░ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди');
        console.log('ЁЯУ╕ **рдлреЛрдЯреЛ analysis**: рдлреЛрдЯреЛ рднреЗрдЬреЗрдВ, рдореИрдВ disease detect рдХрд░реВрдВрдЧрд╛');
        console.log('ЁЯзо **Exact calculations**: Tanki size рдмрддрд╛рдПрдВ, exact medicine calculate рдХрд░реВрдВрдЧрд╛');
        console.log('ЁЯФК **Natural voice**: рдореИрдВ natural voice рдореЗрдВ рдмрд╛рдд рдХрд░рддрд╛ рд╣реВрдВ');
        console.log('тЭдя╕П **Feelings рдХреЗ рд╕рд╛рде**: рдореИрдВ рдЖрдкрдХреА feelings рд╕рдордЭрддрд╛ рд╣реВрдВ');
        
        await this.delay(3000);
    }

    async naturalConversation() {
        console.log('\nЁЯСд User: "рдореЗрд░реЗ рдЯрдорд╛рдЯрд░ рдореЗрдВ рдХрд╛рд▓реЗ рдзрдмреНрдмреЗ рдЖ рд░рд╣реЗ рд╣реИрдВ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдЕрд░реЗ рднрд╛рдИ! рдЖрдкрдХреЗ рдЯрдорд╛рдЯрд░ рдореЗрдВ Late Blight рдХрд╛ рд░реЛрдЧ рд╣реИред');
        console.log('рдЪрд┐рдВрддрд╛ рдордд рдХрд░рд┐рдП, рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред');
        console.log('Chlorothalonil рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред 2-3 рдЧреНрд░рд╛рдо рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓ рдЬрд▓реНрджреА рдареАрдХ рд╣реЛ рдЬрд╛рдПрдЧреАред');
        
        await this.delay(2000);
        
        console.log('\nЁЯСд User: "рдореИрдВ рдлреЛрдЯреЛ рднреЗрдЬ рд░рд╣рд╛ рд╣реВрдВ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рдлреЛрдЯреЛ analyze рдХрд░ рд░рд╣рд╛ рд╣реВрдВ...');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓ рдореЗрдВ disease detect рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред');
        console.log('рдЕрдм рдореБрдЭреЗ рдЖрдкрдХреА tanki size рдмрддрд╛рдЗрдП рддрд╛рдХрд┐ рдореИрдВ exact medicine calculate рдХрд░ рд╕рдХреВрдВред');
        console.log('рдореИрдВ рдЖрдкрдХреА рд╣рд░ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди рджреВрдВрдЧрд╛ред');
        
        await this.delay(2000);
        
        console.log('\nЁЯСд User: "рдореЗрд░реЗ рдкрд╛рд╕ 15 рд▓реАрдЯрд░ рдХреА рдЯрдВрдХреА рд╣реИ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдкрдХреА 15 рд▓реАрдЯрд░ рдЯрдВрдХреА рдХреЗ рд▓рд┐рдП exact calculation:');
        console.log('');
        console.log('ЁЯТК **рджрд╡рд╛**: рдХреНрд▓реЛрд░реЛрдереИрд▓реЛрдирд┐рд▓ 75% WP');
        console.log('ЁЯУП **рдорд╛рддреНрд░рд╛**: 37.5 рдЧреНрд░рд╛рдо');
        console.log('ЁЯТз **рдкрд╛рдиреА**: 15 рд▓реАрдЯрд░');
        console.log('ЁЯТ░ **рд▓рд╛рдЧрдд**: тВ╣14.25');
        console.log('');
        console.log('тП░ **рдЙрдкрдпреЛрдЧ рдХрд╛ рддрд░реАрдХрд╛**:');
        console.log('1. рдкрд╣рд▓реЗ рдЯрдВрдХреА рдореЗрдВ 15 рд▓реАрдЯрд░ рдкрд╛рдиреА рднрд░реЗрдВ');
        console.log('2. 37.5 рдЧреНрд░рд╛рдо рджрд╡рд╛ рдорд┐рд▓рд╛рдПрдВ');
        console.log('3. рдЕрдЪреНрдЫреА рддрд░рд╣ рдорд┐рд▓рд╛рдПрдВ');
        console.log('4. рд╕реБрдмрд╣ 6-8 рдмрдЬреЗ рдпрд╛ рд╢рд╛рдо 5-7 рдмрдЬреЗ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ');
        console.log('5. рд╣рд░ 7 рджрд┐рди рдореЗрдВ рджреЛрдмрд╛рд░рд╛ рдХрд░реЗрдВ');
        console.log('');
        console.log('тЪая╕П **рд╕рд╛рд╡рдзрд╛рдиреА**: рддреНрд╡рдЪрд╛ рдФрд░ рдЖрдВрдЦреЛрдВ рдХреЗ рд╕рдВрдкрд░реНрдХ рд╕реЗ рдмрдЪреЗрдВ');
        console.log('');
        console.log('рдореИрдВ рдЖрдкрдХреЗ рд╕рд╛рде рд╣реВрдВ, рдЪрд┐рдВрддрд╛ рдордд рдХрд░рд┐рдПред');
        
        await this.delay(3000);
    }

    async emotionalResponses() {
        console.log('\nЁЯСд User: "рдзрдиреНрдпрд╡рд╛рдж Happy! рдЖрдкрдХреА рд╕рд▓рд╛рд╣ рдмрд╣реБрдд helpful рд╣реИ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдЖрдкрдХрд╛ рдмрд╣реБрдд-рдмрд╣реБрдд рдзрдиреНрдпрд╡рд╛рдж! рдореИрдВ рдЦреБрд╢ рд╣реВрдВ рдХрд┐ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрд╛ред');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓ рдЕрдЪреНрдЫреА рд╣реЛ, рдпрд╣реА рдореЗрд░реА рдХрд╛рдордирд╛ рд╣реИред');
        console.log('рдЕрдЧрд░ рдХреЛрдИ рдФрд░ problem рд╣реЛ рддреЛ рдореБрдЭрд╕реЗ рдкреВрдЫрд┐рдПред');
        console.log('рдореИрдВ рд╣рдореЗрд╢рд╛ рдпрд╣рд╛рдВ рд╣реВрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдПред');
        
        await this.delay(2000);
        
        console.log('\nЁЯСд User: "рдореБрдЭреЗ рдЪрд┐рдВрддрд╛ рд╣реЛ рд░рд╣реА рд╣реИ рдХрд┐ рдлрд╕рд▓ рдареАрдХ рд╣реЛрдЧреА рдпрд╛ рдирд╣реАрдВ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдЕрд░реЗ рднрд╛рдИ, рдЪрд┐рдВрддрд╛ рдордд рдХрд░рд┐рдП! рдореИрдВ рдпрд╣рд╛рдВ рд╣реВрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдПред');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓ рдЬрд░реВрд░ рдареАрдХ рд╣реЛ рдЬрд╛рдПрдЧреАред');
        console.log('рдореИрдВрдиреЗ рдЖрдкрдХреЛ рд╕рд╣реА treatment рдмрддрд╛рдпрд╛ рд╣реИ, рдмрд╕ follow рдХрд░рд┐рдПред');
        console.log('рдореИрдВ рдЖрдкрдХреЗ рд╕рд╛рде рд╣реВрдВ, рд╣рд░ step рдореЗрдВ рдорджрдж рдХрд░реВрдВрдЧрд╛ред');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓ healthy рд╣реЛрдЧреА, рдореБрдЭ рдкрд░ рднрд░реЛрд╕рд╛ рд░рдЦрд┐рдПред');
        
        await this.delay(2000);
    }

    async problemSolving() {
        console.log('\nЁЯСд User: "рдореЗрд░реЗ рдЪрд╛рд╡рд▓ рдореЗрдВ рднреА problem рд╣реИ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рд╣рд╛рдВ рднрд╛рдИ, рдмрддрд╛рдЗрдП рдХреНрдпрд╛ problem рд╣реИ рдЪрд╛рд╡рд▓ рдореЗрдВ?');
        console.log('рдореИрдВ рдЖрдкрдХреА рд╣рд░ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди рджреВрдВрдЧрд╛ред');
        console.log('рдХреНрдпрд╛ рдкрддреНрддреЛрдВ рдкрд░ рдХреЛрдИ рдзрдмреНрдмреЗ рд╣реИрдВ рдпрд╛ рдХреЛрдИ рдФрд░ рд▓рдХреНрд╖рдг рджрд┐рдЦ рд░рд╣реЗ рд╣реИрдВ?');
        console.log('рдореИрдВ рдпрд╣рд╛рдВ рд╣реВрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдПред');
        
        await this.delay(1500);
        
        console.log('\nЁЯСд User: "рдкрддреНрддреЛрдВ рдкрд░ рднреВрд░реЗ рдзрдмреНрдмреЗ рд╣реИрдВ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдЕрдЪреНрдЫрд╛, рдЪрд╛рд╡рд▓ рдХреЗ рдкрддреНрддреЛрдВ рдкрд░ рднреВрд░реЗ рдзрдмреНрдмреЗ Brown Spot рдХрд╛ рд▓рдХреНрд╖рдг рд╣реИред');
        console.log('рдЪрд┐рдВрддрд╛ рдордд рдХрд░рд┐рдП, рдореИрдВ рдЖрдкрдХреЛ рд╕рд╣реА solution рджреВрдВрдЧрд╛ред');
        console.log('Propiconazole рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред 2-3 рдЧреНрд░рд╛рдо рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред');
        console.log('рд╕реБрдмрд╣ рдпрд╛ рд╢рд╛рдо рдХреЗ рд╕рдордп рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред');
        console.log('рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛, рдЖрдкрдХреА рдлрд╕рд▓ рдЕрдЪреНрдЫреА рд╣реЛ рдЬрд╛рдПрдЧреАред');
        
        await this.delay(2000);
    }

    async farewell() {
        console.log('\nЁЯСд User: "рдмрд╣реБрдд рдзрдиреНрдпрд╡рд╛рдж Happy! рдЖрдк рдмрд╣реБрдд helpful рд╣реИрдВ"');
        
        await this.delay(1000);
        
        console.log('\nЁЯШК Happy:');
        console.log('рдЖрдкрдХрд╛ рдмрд╣реБрдд-рдмрд╣реБрдд рдзрдиреНрдпрд╡рд╛рдж! рдореИрдВ рдмрд╣реБрдд рдЦреБрд╢ рд╣реВрдВ рдХрд┐ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрд╛ред');
        console.log('рдореИрдВ Happy рд╣реВрдВ рдФрд░ рдореИрдВ рд╣рдореЗрд╢рд╛ рдпрд╣рд╛рдВ рд╣реВрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдПред');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓реЗрдВ healthy рд╣реЛрдВ, рдпрд╣реА рдореЗрд░реА рдХрд╛рдордирд╛ рд╣реИред');
        console.log('рдЕрдЧрд░ рдХреЛрдИ рднреА problem рд╣реЛ рддреЛ рдореБрдЭрд╕реЗ рдкреВрдЫрд┐рдПред');
        console.log('рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рджреЛрд╕реНрдд рд╣реВрдВред рд╢реБрднрдХрд╛рдордирд╛рдПрдВ! ЁЯМ▒');
        
        await this.delay(2000);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Demo different scenarios
async function runHappyScenarios() {
    const scenarios = [
        {
            name: 'New User Activation',
            description: 'User says "Happy" to activate the agent'
        },
        {
            name: 'Crop Problem Solving',
            description: 'Happy helps with tomato disease'
        },
        {
            name: 'Emotional Support',
            description: 'Happy provides emotional support to worried farmer'
        },
        {
            name: 'Multiple Crop Issues',
            description: 'Happy helps with rice and chili problems'
        }
    ];

    for (let i = 0; i < scenarios.length; i++) {
        const scenario = scenarios[i];
        console.log(`\n${'='.repeat(60)}`);
        console.log(`ЁЯУЛ Scenario ${i + 1}: ${scenario.name}`);
        console.log(`ЁЯУЭ ${scenario.description}`);
        console.log(`${'='.repeat(60)}`);
        
        await simulateHappyScenario(scenario);
        
        if (i < scenarios.length - 1) {
            console.log('\nтП│ Moving to next scenario...\n');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
}

async function simulateHappyScenario(scenario) {
    console.log(`\nЁЯШК Happy: [${scenario.name}]`);
    
    switch(scenario.name) {
        case 'New User Activation':
            console.log('ЁЯСЛ рдирдорд╕реНрддреЗ! рдореИрдВ Happy рд╣реВрдВред рдореБрдЭреЗ activate рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП \'Happy\' рдмреЛрд▓рд┐рдПред');
            break;
        case 'Crop Problem Solving':
            console.log('рдЕрд░реЗ рднрд╛рдИ! рдЖрдкрдХреЗ рдЯрдорд╛рдЯрд░ рдореЗрдВ Late Blight рдХрд╛ рд░реЛрдЧ рд╣реИред рдЪрд┐рдВрддрд╛ рдордд рдХрд░рд┐рдП, рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред');
            break;
        case 'Emotional Support':
            console.log('рдЕрд░реЗ рднрд╛рдИ, рдЪрд┐рдВрддрд╛ рдордд рдХрд░рд┐рдП! рдореИрдВ рдпрд╣рд╛рдВ рд╣реВрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдПред рдЖрдкрдХреА рдлрд╕рд▓ рдЬрд░реВрд░ рдареАрдХ рд╣реЛ рдЬрд╛рдПрдЧреАред');
            break;
        case 'Multiple Crop Issues':
            console.log('рд╣рд╛рдВ рднрд╛рдИ, рдмрддрд╛рдЗрдП рдХреНрдпрд╛ problem рд╣реИ? рдореИрдВ рдЖрдкрдХреА рд╣рд░ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди рджреВрдВрдЧрд╛ред');
            break;
    }
    
    await new Promise(resolve => setTimeout(resolve, 1500));
}

// Main demo function
async function runDemo() {
    console.log('ЁЯЪА Starting Happy AI Agent Demo...\n');
    
    // Run main demo
    const happy = new HappyDemo();
    await happy.startDemo();
    
    console.log('\n' + '='.repeat(60));
    console.log('ЁЯОЙ Main Demo Completed!');
    console.log('='.repeat(60));
    
    // Run multiple scenarios
    console.log('\nЁЯФД Now demonstrating different scenarios...\n');
    await runHappyScenarios();
    
    console.log('\n' + '='.repeat(60));
    console.log('ЁЯОЙ Demo completed successfully!');
    console.log('='.repeat(60));
    
    console.log('\nЁЯТб Happy\'s Key Features Demonstrated:');
    console.log('   тЬЕ Natural voice activation with "Happy" keyword');
    console.log('   тЬЕ Human-like emotional responses');
    console.log('   тЬЕ Friendly conversation style');
    console.log('   тЬЕ Problem-solving with feelings');
    console.log('   тЬЕ Supportive and caring attitude');
    console.log('   тЬЕ Natural voice with emotional expressions');
    console.log('   тЬЕ Complete agricultural guidance');
    console.log('   тЬЕ Friend-like interaction');
    
    console.log('\nЁЯШК Happy is your perfect agricultural friend!');
}

// Run demo if called directly
if (require.main === module) {
    runDemo().catch(console.error);
}

module.exports = { HappyDemo, runDemo };
