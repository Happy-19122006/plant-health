#!/usr/bin/env node

/**
 * AI Doctor Demo - Complete Conversation Flow
 * This script demonstrates the AI doctor's proactive conversation and calculation abilities
 */

console.log('ЁЯдЦ AI Agricultural Doctor Demo\n');

// Simulate AI Doctor Conversation
class AIDoctorDemo {
    constructor() {
        this.conversationStep = 0;
        this.farmerProfile = null;
        this.currentDisease = null;
        this.tankiSize = null;
    }

    async startConversation() {
        console.log('='.repeat(60));
        console.log('ЁЯдЦ AI Doctor: Starting conversation with farmer...');
        console.log('='.repeat(60));
        
        // Step 1: AI Doctor welcomes farmer
        await this.doctorWelcome();
        
        // Step 2: Farmer responds
        await this.farmerResponse();
        
        // Step 3: AI Doctor analyzes photo
        await this.photoAnalysis();
        
        // Step 4: AI Doctor asks for tanki size
        await this.askTankiSize();
        
        // Step 5: AI Doctor provides complete calculation
        await this.provideCalculation();
        
        // Step 6: AI Doctor offers follow-up help
        await this.followUpHelp();
    }

    async doctorWelcome() {
        console.log('\nЁЯдЦ AI Doctor:');
        console.log('рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдХреГрд╖рд┐ рдбреЙрдХреНрдЯрд░ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдлрд╕рд▓реЛрдВ рдХреА рджреЗрдЦрднрд╛рд▓ рдореЗрдВ рдорджрдж рдХрд░реВрдВрдЧрд╛ред');
        console.log('рдмрддрд╛рдЗрдП, рдЖрдЬ рдЖрдкрдХреА рдХреМрди рд╕реА рдлрд╕рд▓ рдореЗрдВ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рд╣реИ? рдЖрдк рдореБрдЭреЗ рдлреЛрдЯреЛ рднреА рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВред');
        
        await this.delay(2000);
    }

    async farmerResponse() {
        console.log('\nЁЯСитАНЁЯМ╛ Farmer:');
        console.log('рд╣реИрд▓реЛ рдбреЙрдХреНрдЯрд░! рдореЗрд░реЗ рдЯрдорд╛рдЯрд░ рдХреЗ рдкрддреНрддреЛрдВ рдкрд░ рдХрд╛рд▓реЗ рдзрдмреНрдмреЗ рдЖ рд░рд╣реЗ рд╣реИрдВред');
        console.log('рдореИрдВ рдЖрдкрдХреЛ рдлреЛрдЯреЛ рднреЗрдЬ рд░рд╣рд╛ рд╣реВрдВ...');
        
        await this.delay(1500);
    }

    async photoAnalysis() {
        console.log('\nЁЯдЦ AI Doctor:');
        console.log('рдлреЛрдЯреЛ рдХреЛ scan рдХрд░ рд░рд╣рд╛ рд╣реВрдВ...');
        
        await this.delay(2000);
        
        // Simulate photo analysis
        this.currentDisease = {
            disease: 'Late Blight',
            disease_hi: 'рд▓реЗрдЯ рдмреНрд▓рд╛рдЗрдЯ',
            crop: 'Tomato',
            crop_hi: 'рдЯрдорд╛рдЯрд░',
            confidence: 0.85,
            symptoms: ['Dark water-soaked lesions', 'White fungal growth'],
            symptoms_hi: ['рдХрд╛рд▓реЗ рдкрд╛рдиреА рд╕реЗ рднрд░реЗ рдШрд╛рд╡', 'рд╕рдлреЗрдж рдлрдВрдЧрд▓ рд╡реГрджреНрдзрд┐']
        };
        
        console.log(`рдореИрдВрдиреЗ рдЖрдкрдХреА рдлреЛрдЯреЛ рджреЗрдЦреА рд╣реИред рдЖрдкрдХреА ${this.currentDisease.crop_hi} рдореЗрдВ ${this.currentDisease.disease_hi} рдХрд╛ рд░реЛрдЧ рд╣реИред`);
        console.log(`Confidence: ${Math.round(this.currentDisease.confidence * 100)}%`);
        console.log('рдпрд╣ рдПрдХ рдЧрдВрднреАрд░ рд░реЛрдЧ рд╣реИ рдЬреЛ рддреБрд░рдВрдд рдЙрдкрдЪрд╛рд░ рдЪрд╛рд╣рддрд╛ рд╣реИред');
        
        await this.delay(2000);
    }

    async askTankiSize() {
        console.log('\nЁЯдЦ AI Doctor:');
        console.log('рдЕрдм рдореБрдЭреЗ рдмрддрд╛рдЗрдП рдХрд┐ рдЖрдк рдХрд┐рддрдиреЗ рд▓реАрдЯрд░ рдХреА рдЯрдВрдХреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВрдЧреЗ?');
        console.log('(рдЬреИрд╕реЗ 10, 15, 20 рд▓реАрдЯрд░)');
        
        await this.delay(1500);
        
        console.log('\nЁЯСитАНЁЯМ╛ Farmer:');
        console.log('рдореЗрд░реЗ рдкрд╛рд╕ 15 рд▓реАрдЯрд░ рдХреА рдЯрдВрдХреА рд╣реИред');
        
        this.tankiSize = 15;
        await this.delay(1000);
    }

    async provideCalculation() {
        console.log('\nЁЯдЦ AI Doctor:');
        console.log('рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рдЖрдкрдХреА 15 рд▓реАрдЯрд░ рдЯрдВрдХреА рдХреЗ рд▓рд┐рдП рдореИрдВ рдЖрдкрдХреЛ exact calculation рджреЗрддрд╛ рд╣реВрдВ:\n');
        
        // AI's intelligent calculation
        const medicineQuantity = (this.tankiSize * 2.5).toFixed(1); // 2.5 grams per liter
        const cost = (380 * medicineQuantity / 1000).toFixed(2); // тВ╣380 per 1000g
        
        console.log('ЁЯТК **рджрд╡рд╛**: рдХреНрд▓реЛрд░реЛрдереИрд▓реЛрдирд┐рд▓ 75% WP');
        console.log(`ЁЯУП **рдорд╛рддреНрд░рд╛**: ${medicineQuantity} рдЧреНрд░рд╛рдо`);
        console.log(`ЁЯТз **рдкрд╛рдиреА**: ${this.tankiSize} рд▓реАрдЯрд░`);
        console.log(`ЁЯТ░ **рд▓рд╛рдЧрдд**: тВ╣${cost}\n`);
        
        console.log('тП░ **рдЙрдкрдпреЛрдЧ рдХрд╛ рддрд░реАрдХрд╛**:');
        console.log(`1. рдкрд╣рд▓реЗ рдЯрдВрдХреА рдореЗрдВ ${this.tankiSize} рд▓реАрдЯрд░ рдкрд╛рдиреА рднрд░реЗрдВ`);
        console.log(`2. ${medicineQuantity} рдЧреНрд░рд╛рдо рджрд╡рд╛ рдорд┐рд▓рд╛рдПрдВ`);
        console.log('3. рдЕрдЪреНрдЫреА рддрд░рд╣ рдорд┐рд▓рд╛рдПрдВ');
        console.log('4. рд╕реБрдмрд╣ 6-8 рдмрдЬреЗ рдпрд╛ рд╢рд╛рдо 5-7 рдмрдЬреЗ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ');
        console.log('5. рд╣рд░ 7 рджрд┐рди рдореЗрдВ рджреЛрдмрд╛рд░рд╛ рдХрд░реЗрдВ\n');
        
        console.log('тЪая╕П **рд╕рд╛рд╡рдзрд╛рдиреА**: рддреНрд╡рдЪрд╛ рдФрд░ рдЖрдВрдЦреЛрдВ рдХреЗ рд╕рдВрдкрд░реНрдХ рд╕реЗ рдмрдЪреЗрдВ');
        console.log('ЁЯМдя╕П **рдореМрд╕рдо**: 24 рдШрдВрдЯреЗ рддрдХ рдмрд╛рд░рд┐рд╢ рди рд╣реЛ, рддрд╛рдкрдорд╛рди 30┬░C рд╕реЗ рдХрдо');
        
        await this.delay(3000);
    }

    async followUpHelp() {
        console.log('\nЁЯдЦ AI Doctor:');
        console.log('рдХреНрдпрд╛ рдЖрдкрдХреЛ рдХреЛрдИ рдФрд░ рд╕рд╡рд╛рд▓ рд╣реИ? рдпрд╛ рдЖрдк рдХрд┐рд╕реА рдФрд░ рдлрд╕рд▓ рдХреА рдлреЛрдЯреЛ рднреЗрдЬрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?');
        
        await this.delay(1500);
        
        console.log('\nЁЯСитАНЁЯМ╛ Farmer:');
        console.log('рдзрдиреНрдпрд╡рд╛рдж рдбреЙрдХреНрдЯрд░! рдЖрдкрдХреА рд╕рд▓рд╛рд╣ рдмрд╣реБрдд helpful рд╣реИред');
        console.log('рдореИрдВ рддреБрд░рдВрдд рдЗрд╕ treatment рдХреЛ follow рдХрд░реВрдВрдЧрд╛ред');
        
        await this.delay(1000);
        
        console.log('\nЁЯдЦ AI Doctor:');
        console.log('рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рдореИрдВ рдЖрдкрдХреЗ рд╕рд╛рде рд╣реВрдВред рдЕрдЧрд░ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рдЖрдП рддреЛ рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред');
        console.log('рдЖрдкрдХреА рдлрд╕рд▓ рдЬрд▓реНрджреА рдареАрдХ рд╣реЛ рдЬрд╛рдПрдЧреАред рд╢реБрднрдХрд╛рдордирд╛рдПрдВ! ЁЯМ▒');
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Demo different scenarios
async function runMultipleScenarios() {
    const scenarios = [
        {
            name: 'Tomato Late Blight - 15L Tank',
            disease: 'Late Blight',
            crop: 'Tomato',
            tankiSize: 15
        },
        {
            name: 'Rice Blast - 20L Tank',
            disease: 'Rice Blast',
            crop: 'Rice',
            tankiSize: 20
        },
        {
            name: 'Chili Anthracnose - 10L Tank',
            disease: 'Chili Anthracnose',
            crop: 'Chili',
            tankiSize: 10
        }
    ];

    for (let i = 0; i < scenarios.length; i++) {
        const scenario = scenarios[i];
        console.log(`\n${'='.repeat(60)}`);
        console.log(`ЁЯУЛ Scenario ${i + 1}: ${scenario.name}`);
        console.log(`${'='.repeat(60)}`);
        
        // Simulate quick calculation for each scenario
        await simulateQuickCalculation(scenario);
        
        if (i < scenarios.length - 1) {
            console.log('\nтП│ Moving to next scenario...\n');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
}

async function simulateQuickCalculation(scenario) {
    console.log(`\nЁЯдЦ AI Doctor: Analyzing ${scenario.crop} ${scenario.disease}...`);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const medicineQuantity = (scenario.tankiSize * 2.5).toFixed(1);
    const cost = (380 * medicineQuantity / 1000).toFixed(2);
    
    console.log(`\nЁЯУК Quick Calculation for ${scenario.tankiSize}L tank:`);
    console.log(`ЁЯТК Medicine: ${scenario.disease} Treatment`);
    console.log(`ЁЯУП Quantity: ${medicineQuantity} grams`);
    console.log(`ЁЯТз Water: ${scenario.tankiSize} liters`);
    console.log(`ЁЯТ░ Cost: тВ╣${cost}`);
    console.log(`тП░ Frequency: Every 7 days`);
    console.log(`ЁЯФД Total Applications: 3 times`);
}

// Main demo function
async function runDemo() {
    console.log('ЁЯЪА Starting AI Agricultural Doctor Demo...\n');
    
    // Run main conversation
    const doctor = new AIDoctorDemo();
    await doctor.startConversation();
    
    console.log('\n' + '='.repeat(60));
    console.log('ЁЯОЙ Main Conversation Completed!');
    console.log('='.repeat(60));
    
    // Run multiple scenarios
    console.log('\nЁЯФД Now demonstrating multiple scenarios...\n');
    await runMultipleScenarios();
    
    console.log('\n' + '='.repeat(60));
    console.log('ЁЯОЙ Demo completed successfully!');
    console.log('='.repeat(60));
    
    console.log('\nЁЯТб Key Features Demonstrated:');
    console.log('   тЬЕ Proactive AI Doctor conversation');
    console.log('   тЬЕ Photo analysis and disease detection');
    console.log('   тЬЕ Tanki size-based calculations');
    console.log('   тЬЕ Complete medicine usage guide');
    console.log('   тЬЕ Multilingual support (Hindi/English)');
    console.log('   тЬЕ AI mind calculations (no external calculator)');
    console.log('   тЬЕ Safety precautions and timing');
    console.log('   тЬЕ Cost estimates and follow-up help');
    
    console.log('\nЁЯМ▒ This AI Doctor provides complete agricultural guidance!');
}

// Run demo if called directly
if (require.main === module) {
    runDemo().catch(console.error);
}

module.exports = { AIDoctorDemo, runDemo };
